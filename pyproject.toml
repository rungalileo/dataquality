[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "dataquality"
version = "2.0.1"
description = ""
authors = ["Galileo Technologies, Inc. <team@rungalileo.io>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/rungalileo/dataquality"
documentation = "https://rungalileo.gitbook.io/galileo"
scripts = { dqyolo = "dataquality.dqyolo:main" }

[tool.poetry.dependencies]
python = "^3.9,<3.11"
pydantic = ">=2.0.0"
requests = ">=2.25.1"
types-requests = ">=2.25.2"
pandas = ">=0.20.0"
pyarrow = ">=5.0.0"
vaex-core = "4.17.1"
vaex-hdf5 = ">=0.12,<0.13"
diskcache = ">=5.2.1"
resource = ">=0.2.1"
tqdm = ">=4.62.3"
blake3 = ">=0.2.1"
wrapt = ">=1.13.3"
scipy = ">=1.7.0"
cachetools = ">=4.2.4"
importlib-metadata = "<6.0.1"
datasets = ">=2.14.6"
transformers = ">=4.17.0"
seqeval = "*"
sentence-transformers = ">=2.2"
Pillow = "*"
h5py = ">=3.1.0"
numpy = "<1.24.0"
tenacity = ">=8.1.0"
evaluate = "*"
accelerate = "*"
ipywidgets = ">=8.1.0"
imagededup = ">=0.3.1,<0.3.2"
pyjwt = ">=2.8.0"
peft = "*"
# Pin opencv for linting incompatibility
opencv-python = "<=4.8.1.78"
pydantic-settings = ">=2.0.0"
minio = {version = ">=7.1.0,<7.2.0", optional=true}
setfit = {version ="==0.7.0", optional = true}

# Cuda.
ucx-py-cu11 = { version ="^0.36", source = "nvidia", optional = true }
rmm-cu11 = {version = "^24.2.0", source = "nvidia", optional=true}
raft-dask-cu11 = {version = "^24.2.0", source = "nvidia", optional=true}
pylibraft-cu11 = {version = "^24.2.0", source = "nvidia", optional=true}
dask-cudf-cu11 = {version = "^24.2.0", source = "nvidia", optional=true}
cudf-cu11 = {version = "^24.2.0", source = "nvidia", optional=true}
cuml-cu11 = {version = "^24.2.0", source = "nvidia", optional=true}
sentencepiece = "^0.2.0"

[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"
invoke = ">=1.6.0"
pre-commit = "^3.6.1"


[tool.poetry.extras]
cuda = ["ucx-py-cu11", "rmm-cu11", "raft-dask-cu11", "pylibraft-cu11", "dask-cudf-cu11", "cudf-cu11", "cuml-cu11"]
minio = ["minio"]
setfit = ["setfit"]


[tool.poetry.group.docs.dependencies]
furo = "^2024.0.0"
sphinx-autodoc-typehints = "^2.0.0"
myst-parser = "^2.0.0"
sphinx-markdown-builder = "^0.6.5"
sphinx-autobuild = "^2021.3.14"
autodoc-pydantic = "^2.0.1"


[tool.poetry.group.test.dependencies]
ultralytics = ">=8.0.209"
pytest = ">=7.2.1"
freezegun = ">=1.2.2"
coverage = { version = ">=7.0.5", extras = ["toml"] }
pytest-cov = ">=4.0.0"
scikit-learn = ">=1.0"
tensorflow = ">=2.9.1"
pytest-env = ">=0.8.1"
pytest-xdist = ">=2.4.0"
types-setuptools = ">=67.3.0.1"
types-cachetools = ">=4.2.4"
torchvision = ">=0.13.1"
torch = ">=1.12.1"
torchtext = ">=0.13.1"
torchdata = ">=0.4.1"
xgboost = ">=1.6.2"
timm = ">=0.6.12"
fastai = ">=2.7.11"
portalocker = "==2.7.0"
types-PyYAML = "==6.0.12.9"
setfit = "==0.7.0"
accelerate = ">=0.19.0"
typing-inspect = "==0.8.0"
typing-extensions = ">=4.9.0"
lightning = "*"  # Assuming you want the latest version as no version was specified



[[tool.poetry.source]]
name = "nvidia"
url = "https://pypi.nvidia.com"
priority = "supplemental"

[tool.pytest.ini_options]
env = ["GALILEO_API_URL=http://localhost:8000"]
addopts = [
    "-n",
    "auto",
    "-o",
    "console_output_style=progress",
    "--durations=10",
    "--disable-warnings",
    "--cov=dataquality",
    "--cov=tests",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
]

[tool.coverage.run]
parallel = true
source = ["dataquality/", "tests/"]
omit = ["*__init__.py", "*metrics.py"]

[tool.coverage.report]
exclude_lines = ['pragma: no cover', 'raise NotImplementedError']

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true

[tool.ruff]
line-length = 88

[tool.ruff.lint]
ignore = ["D10"]
select = ["E", "F", "I"]
extend-ignore = [
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
    "D415",
    "E731",
]

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.*_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
